call plug#begin()
Plug 'cocopon/iceberg.vim'
Plug 'cocopon/pgmnt.vim'
Plug 'ycm-core/YouCompleteMe'
Plug 'vim-syntastic/syntastic'
Plug 'maralla/validator.vim'
Plug 'ycm-core/YouCompleteMe'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'pixelneo/vim-python-docstring'
Plug 'cocopon/pgmnt.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'dense-analysis/ale'
Plug 'jiangmiao/auto-pairs'
Plug 'rhysd/vim-clang-format'
Plug 'vim-airline/vim-airline'
Plug 'Yggdroot/indentLine'
Plug 'Chiel92/vim-autoformat'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-ctrlspace/vim-ctrlspace'
Plug 'cdelledonne/vim-cmake'

let g:ycm_global_ycm_extra_conf = '/root/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

call plug#end()

set nocompatible
set hidden

if exists('+colorscheme') && exists('g:colors_name') && g:colors_name == ''
	colorscheme iceberg
endif

let g:python3_host_prog="/usr/bin/python3"

let g:ycm_server_keep_logfiles = 1
let g:ycm_server_log_level = 'debug'
let g:ycm_global_ycm_extra_conf = '/root/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
set encoding=utf-8

au BufWrite * :Autoformat

set paste
filetype plugin indent on
set guifont=Hack\ 11
let g:AutoPairsShortcutToggle = '<C-P>'

autocmd FileType c ClangFormatAutoEnable
autocmd FileType cpp ClangFormatAutoEnable
autocmd FileType h ClangFormatAutoEnable

" commenting
" Commenting blocks of code.
autocmd FileType c,cpp,java,scala let b:comment_leader = '// '
autocmd FileType sh,ruby,python   let b:comment_leader = '# '
autocmd FileType conf,fstab       let b:comment_leader = '# '
autocmd FileType tex              let b:comment_leader = '% '
autocmd FileType mail             let b:comment_leader = '> '
autocmd FileType vim              let b:comment_leader = '" '
noremap <silent> ,cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> ,cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '⚠'
let g:ale_lint_on_text_changed = 'never'


let g:formatdef_autopep8 = "'autopep8 - --range '.a:firstline.' '.a:lastline"
let g:formatters_python = ['autopep8']

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#ctrlspace#enabled = 1
let g:airline#extensions#tabline#formatter = 'default'

" cmake
set statusline=%{cmake#GetInfo().cmake_version.string}

"
au ColorScheme * set cursorline
au ColorScheme * hi ColorColumn ctermbg=235 guibg=#2d2d27
au ColorScheme * hi Normal guifg=#eeeeee ctermfg=255 guibg=NONE ctermbg=NONE gui=NONE cterm=NONE
au ColorScheme * hi EndOfBuffer guifg=#eeeeee ctermfg=255 guibg=NONE ctermbg=NONE gui=NONE cterm=NONE
au ColorScheme * hi SpecialKey ctermbg=NONE ctermfg=236 guibg=NONE guifg=#242940
au ColorScheme * hi NonText ctermbg=NONE ctermfg=236 guibg=NONE guifg=#242940
au ColorScheme * hi CursorLine NONE
au ColorScheme * hi Comment     cterm=italic gui=italic
au ColorScheme * hi goFunction  cterm=italic gui=italic
au ColorScheme * hi goStructDef cterm=italic gui=italic
