# Playbook create ASOCS stack.
#
#  - It populate all DVS.
#  - Create required Port-groups on separate DVS, dedicated for all SRIOV.
#  - Take reference OVA , upload as master template.
#  - Re-create two template , each template for CU and DU.
#  - Create new network adapters and maps each to SRIOV.
#  - Serialize back all VM as templates.
#
# In case of issue mbayramo@vmware.com
# First we get all DVS.
- name: Gather all registered dvswitch
  community.vmware.vmware_dvswitch_info:
    hostname: "{{ vc_name }}"
    username: "{{ vc_user }}"
    password: "{{ vc_pass }}"
    validate_certs: False
  delegate_to: localhost
  register: dvswitch_info

# Now we can Upload ova and convert to template.
- name: "Deploy OVF template"
  community.vmware.vmware_deploy_ovf:
    allow_duplicates: False
    validate_certs: False
    hostname: "{{ vc_name }}"
    username: "{{ vc_user }}"
    password: "{{ vc_pass }}"
    datacenter: "{{ dc }}"
    cluster: "{{ cluster_name }}"
    datastore: "{{ datast }}"
    name: druid_centos_template
    power_on: no
    ovf: "{{ centos_ova }}"
  delegate_to: localhost

# Adjust centos template
- name: Adjusting default druid ova vm attributes
  community.vmware.vmware_guest:
    validate_certs: False
    hostname: "{{ vc_name }}"
    username: "{{ vc_user }}"
    password: "{{ vc_pass }}"
    datacenter: "{{ dc }}"
    cluster: "{{ cluster_name }}"
    state: poweredon
    name: druid_centos_template
    convert: thin
    networks:
      - name: "{{ pg_mgmt_name }}"
    #is_template: no
    disk:
    # slot 0 we don't touch
#    - size_gb: 40
#      controller_type: 'paravirtual'
#      controller_number: 0
#      unit_number: 1
    hardware:
      hotadd_cpu: True
      hotremove_cpu: True
      hotadd_memory: True
      version: "{{ druid.hw_ver | default('14') }}"
      memory_mb: "{{ druid.memory_mb | default('8192') }}"
      num_cpus: "{{ druid.num_cpus | default('2') }}"
      num_cpu_cores_per_socket: "{{ druid.num_cpu_cores_per_socket | default('1') }}"
      mem_limit: "{{ druid.mem_limit | default('0') }}"
      mem_reservation: "{{ druid.mem_reservation | default('0') }}"
      cpu_limit: "{{ druid.cpu_limit | default('0') }}"
      cpu_reservation: "{{ druid.cpu_reservation | default('0') }}"
    wait_for_ip_address: true
    wait_for_ip_address_timeout: 800
  delegate_to: localhost
  register: druid_origin

- name: Create in-memory Ansible inventory
  add_host:
    name: "{{ druid_origin.instance.hw_eth0.ipaddresses.0 }}"
    groups: created_nodes
    ansible_user: centos
    ansible_ssh_user: "centos"
    ansible_ssh_pass: "centos"
    ansible_connection: ssh